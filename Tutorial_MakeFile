Makefile TUTORIAL
~~~~~~~~~~~~~~~~~

Reference:
	https://opensource.com/article/18/8/what-how-makefile
	https://www.gnu.org/software/make/manual/make.pdf

1. Create a make file withe name "Makefile" and contents of that contians,
	say_hello:
		echo "Hello World"

2. Now save it and close and type make in the terminal, we will get the following output,
	$ make
	echo "Hello World"
	Hello World

3. Here, say_hello behaves like a function name. So say_hello is called TARGET.

4. The PREQUSITIES or DEPENDENCIES follow the target, in this program there are none due to simplicity.

5.  SYNTAX:
	target: prerequisites
	<TAB> recipe

6. Note:
	<> It's not necessary target should be a file.
	
7. In the above command the output displayed the command and the command output, But we dont want the command to be printed, during such scenario we need to do the following:
	say_hello:
		@echo "Hello World"

8. When we run "make" after adding additional target it execute the first target in the list of target available.

9. We can overroide the default by,
	.DEFAULT_GOAL := generate
	# where generate is our default TARGET name and it should be placed at the beginning of the make file.

10. .PHONY: all say_Hello generate clean
	Here .PHONY contains the list of all the target.

11. all: say_Hello generate
	Here all will automatically call all the target in the lsit in the left to right order and its a good practise not to use clean in it and using of clean as initial arget should be avoided.

12. Till now we have used target and prequsities that are hard coded, But they can be replaced with variables and patterns.

13. To define a variable in make file we use = operator.
	For ex,
		CC = gcc
	This is recursively expanded variable. 

14. Using variable we can compile and run the program as follow,
	For ex,
		CC = g++
		hello: hello.cpp
			${CC} hello.cpp -o hello

	So this content in the make file will compile the hello.cpp program.

15. Sometimes we may end up in a recursive infinite loop to avoid it do the following,

	CC := gcc
		 

      
 
